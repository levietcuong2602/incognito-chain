// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	common "github.com/incognitochain/incognito-chain/common"
	incdb "github.com/incognitochain/incognito-chain/incdb"

	incognitokey "github.com/incognitochain/incognito-chain/incognitokey"

	mock "github.com/stretchr/testify/mock"

	types "github.com/incognitochain/incognito-chain/blockchain/types"
)

// View is an autogenerated mock type for the View type
type View struct {
	mock.Mock
}

// CommitteeStateVersion provides a mock function with given fields:
func (_m *View) CommitteeStateVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetBeaconHeight provides a mock function with given fields:
func (_m *View) GetBeaconHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetBlock provides a mock function with given fields:
func (_m *View) GetBlock() types.BlockInterface {
	ret := _m.Called()

	var r0 types.BlockInterface
	if rf, ok := ret.Get(0).(func() types.BlockInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.BlockInterface)
		}
	}

	return r0
}

// GetCommittee provides a mock function with given fields:
func (_m *View) GetCommittee() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetHash provides a mock function with given fields:
func (_m *View) GetHash() *common.Hash {
	ret := _m.Called()

	var r0 *common.Hash
	if rf, ok := ret.Get(0).(func() *common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Hash)
		}
	}

	return r0
}

// GetHeight provides a mock function with given fields:
func (_m *View) GetHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetPreviousBlockCommittee provides a mock function with given fields: db
func (_m *View) GetPreviousBlockCommittee(db incdb.Database) ([]incognitokey.CommitteePublicKey, error) {
	ret := _m.Called(db)

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func(incdb.Database) []incognitokey.CommitteePublicKey); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(incdb.Database) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreviousHash provides a mock function with given fields:
func (_m *View) GetPreviousHash() *common.Hash {
	ret := _m.Called()

	var r0 *common.Hash
	if rf, ok := ret.Get(0).(func() *common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Hash)
		}
	}

	return r0
}

// GetProposerByTimeSlot provides a mock function with given fields: ts, version
func (_m *View) GetProposerByTimeSlot(ts int64, version int) (incognitokey.CommitteePublicKey, int) {
	ret := _m.Called(ts, version)

	var r0 incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func(int64, int) incognitokey.CommitteePublicKey); ok {
		r0 = rf(ts, version)
	} else {
		r0 = ret.Get(0).(incognitokey.CommitteePublicKey)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int64, int) int); ok {
		r1 = rf(ts, version)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
