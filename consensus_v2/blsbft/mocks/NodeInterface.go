// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	common "github.com/incognitochain/incognito-chain/common"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p-core/peer"

	types "github.com/incognitochain/incognito-chain/blockchain/types"

	wire "github.com/incognitochain/incognito-chain/wire"
)

// NodeInterface is an autogenerated mock type for the NodeInterface type
type NodeInterface struct {
	mock.Mock
}

// GetMiningKeys provides a mock function with given fields:
func (_m *NodeInterface) GetMiningKeys() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPrivateKey provides a mock function with given fields:
func (_m *NodeInterface) GetPrivateKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSelfPeerID provides a mock function with given fields:
func (_m *NodeInterface) GetSelfPeerID() peer.ID {
	ret := _m.Called()

	var r0 peer.ID
	if rf, ok := ret.Get(0).(func() peer.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(peer.ID)
	}

	return r0
}

// GetUserMiningState provides a mock function with given fields:
func (_m *NodeInterface) GetUserMiningState() (string, int) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// IsEnableMining provides a mock function with given fields:
func (_m *NodeInterface) IsEnableMining() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PushBlockToAll provides a mock function with given fields: block, previousValidationData, isBeacon
func (_m *NodeInterface) PushBlockToAll(block types.BlockInterface, previousValidationData string, isBeacon bool) error {
	ret := _m.Called(block, previousValidationData, isBeacon)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.BlockInterface, string, bool) error); ok {
		r0 = rf(block, previousValidationData, isBeacon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushMessageToChain provides a mock function with given fields: msg, chain
func (_m *NodeInterface) PushMessageToChain(msg wire.Message, chain common.ChainInterface) error {
	ret := _m.Called(msg, chain)

	var r0 error
	if rf, ok := ret.Get(0).(func(wire.Message, common.ChainInterface) error); ok {
		r0 = rf(msg, chain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestMissingViewViaStream provides a mock function with given fields: peerID, hashes, fromCID, chainName
func (_m *NodeInterface) RequestMissingViewViaStream(peerID string, hashes [][]byte, fromCID int, chainName string) error {
	ret := _m.Called(peerID, hashes, fromCID, chainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, [][]byte, int, string) error); ok {
		r0 = rf(peerID, hashes, fromCID, chainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
