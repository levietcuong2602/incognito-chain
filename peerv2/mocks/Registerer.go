// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import peer "github.com/libp2p/go-libp2p-core/peer"

import proto "github.com/incognitochain/incognito-chain/peerv2/proto"

// Registerer is an autogenerated mock type for the Registerer type
type Registerer struct {
	mock.Mock
}

// Register provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *Registerer) Register(_a0 context.Context, _a1 string, _a2 []string, _a3 []byte, _a4 peer.ID, _a5 string) ([]*proto.MessageTopicPair, *proto.UserRole, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 []*proto.MessageTopicPair
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []byte, peer.ID, string) []*proto.MessageTopicPair); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.MessageTopicPair)
		}
	}

	var r1 *proto.UserRole
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, []byte, peer.ID, string) *proto.UserRole); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*proto.UserRole)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, []string, []byte, peer.ID, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Target provides a mock function with given fields:
func (_m *Registerer) Target() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateTarget provides a mock function with given fields: _a0
func (_m *Registerer) UpdateTarget(_a0 peer.ID) {
	_m.Called(_a0)
}
