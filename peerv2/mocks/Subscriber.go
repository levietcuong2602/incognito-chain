// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/incognitochain/go-libp2p-pubsub"
)

// Subscriber is an autogenerated mock type for the Subscriber type
type Subscriber struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: topic, opts
func (_m *Subscriber) Subscribe(topic string, opts ...pubsub.SubOpt) (*pubsub.Subscription, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pubsub.Subscription
	if rf, ok := ret.Get(0).(func(string, ...pubsub.SubOpt) *pubsub.Subscription); ok {
		r0 = rf(topic, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...pubsub.SubOpt) error); ok {
		r1 = rf(topic, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
