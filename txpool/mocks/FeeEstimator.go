// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	common "github.com/incognitochain/incognito-chain/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/incognitochain/incognito-chain/blockchain/types"
)

// FeeEstimator is an autogenerated mock type for the FeeEstimator type
type FeeEstimator struct {
	mock.Mock
}

// EstimateFee provides a mock function with given fields: numBlocks, tokenId
func (_m *FeeEstimator) EstimateFee(numBlocks uint64, tokenId *common.Hash) (uint64, error) {
	ret := _m.Called(numBlocks, tokenId)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64, *common.Hash) uint64); ok {
		r0 = rf(numBlocks, tokenId)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, *common.Hash) error); ok {
		r1 = rf(numBlocks, tokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitFeeForNativeToken provides a mock function with given fields:
func (_m *FeeEstimator) GetLimitFeeForNativeToken() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// RegisterBlock provides a mock function with given fields: block
func (_m *FeeEstimator) RegisterBlock(block *types.ShardBlock) error {
	ret := _m.Called(block)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ShardBlock) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
