// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import metadata "github.com/incognitochain/incognito-chain/metadata"
import mock "github.com/stretchr/testify/mock"
import statedb "github.com/incognitochain/incognito-chain/dataaccessobject/statedb"
import txpool "github.com/incognitochain/incognito-chain/txpool"

// TxVerifier is an autogenerated mock type for the TxVerifier type
type TxVerifier struct {
	mock.Mock
}

// FullValidateTransactions provides a mock function with given fields: chainRetriever, shardViewRetriever, beaconViewRetriever, txs
func (_m *TxVerifier) FullValidateTransactions(chainRetriever metadata.ChainRetriever, shardViewRetriever metadata.ShardViewRetriever, beaconViewRetriever metadata.BeaconViewRetriever, txs []metadata.Transaction) (bool, error) {
	ret := _m.Called(chainRetriever, shardViewRetriever, beaconViewRetriever, txs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata.ChainRetriever, metadata.ShardViewRetriever, metadata.BeaconViewRetriever, []metadata.Transaction) bool); ok {
		r0 = rf(chainRetriever, shardViewRetriever, beaconViewRetriever, txs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metadata.ChainRetriever, metadata.ShardViewRetriever, metadata.BeaconViewRetriever, []metadata.Transaction) error); ok {
		r1 = rf(chainRetriever, shardViewRetriever, beaconViewRetriever, txs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadCommitment provides a mock function with given fields: tx, shardViewRetriever
func (_m *TxVerifier) LoadCommitment(tx metadata.Transaction, shardViewRetriever metadata.ShardViewRetriever) (bool, error) {
	ret := _m.Called(tx, shardViewRetriever)

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata.Transaction, metadata.ShardViewRetriever) bool); ok {
		r0 = rf(tx, shardViewRetriever)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metadata.Transaction, metadata.ShardViewRetriever) error); ok {
		r1 = rf(tx, shardViewRetriever)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadCommitmentForTxs provides a mock function with given fields: txs, shardViewRetriever
func (_m *TxVerifier) LoadCommitmentForTxs(txs []metadata.Transaction, shardViewRetriever metadata.ShardViewRetriever) (bool, error) {
	ret := _m.Called(txs, shardViewRetriever)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]metadata.Transaction, metadata.ShardViewRetriever) bool); ok {
		r0 = rf(txs, shardViewRetriever)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]metadata.Transaction, metadata.ShardViewRetriever) error); ok {
		r1 = rf(txs, shardViewRetriever)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeeEstimator provides a mock function with given fields: estimator
func (_m *TxVerifier) UpdateFeeEstimator(estimator txpool.FeeEstimator) {
	_m.Called(estimator)
}

// UpdateTransactionStateDB provides a mock function with given fields: newSDB
func (_m *TxVerifier) UpdateTransactionStateDB(newSDB *statedb.StateDB) {
	_m.Called(newSDB)
}

// ValidateWithChainState provides a mock function with given fields: tx, chainRetriever, shardViewRetriever, beaconViewRetriever, beaconHeight
func (_m *TxVerifier) ValidateWithChainState(tx metadata.Transaction, chainRetriever metadata.ChainRetriever, shardViewRetriever metadata.ShardViewRetriever, beaconViewRetriever metadata.BeaconViewRetriever, beaconHeight uint64) (bool, error) {
	ret := _m.Called(tx, chainRetriever, shardViewRetriever, beaconViewRetriever, beaconHeight)

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata.Transaction, metadata.ChainRetriever, metadata.ShardViewRetriever, metadata.BeaconViewRetriever, uint64) bool); ok {
		r0 = rf(tx, chainRetriever, shardViewRetriever, beaconViewRetriever, beaconHeight)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metadata.Transaction, metadata.ChainRetriever, metadata.ShardViewRetriever, metadata.BeaconViewRetriever, uint64) error); ok {
		r1 = rf(tx, chainRetriever, shardViewRetriever, beaconViewRetriever, beaconHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateWithoutChainstate provides a mock function with given fields: _a0
func (_m *TxVerifier) ValidateWithoutChainstate(_a0 metadata.Transaction) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata.Transaction) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metadata.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
