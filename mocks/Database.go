// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	incdb "github.com/incognitochain/incognito-chain/incdb"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Compact provides a mock function with given fields: start, limit
func (_m *Database) Compact(start []byte, limit []byte) error {
	ret := _m.Called(start, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(start, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *Database) Delete(key []byte) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *Database) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: key
func (_m *Database) Has(key []byte) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBatch provides a mock function with given fields:
func (_m *Database) NewBatch() incdb.Batch {
	ret := _m.Called()

	var r0 incdb.Batch
	if rf, ok := ret.Get(0).(func() incdb.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(incdb.Batch)
		}
	}

	return r0
}

// NewIterator provides a mock function with given fields:
func (_m *Database) NewIterator() incdb.Iterator {
	ret := _m.Called()

	var r0 incdb.Iterator
	if rf, ok := ret.Get(0).(func() incdb.Iterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(incdb.Iterator)
		}
	}

	return r0
}

// NewIteratorWithPrefix provides a mock function with given fields: prefix
func (_m *Database) NewIteratorWithPrefix(prefix []byte) incdb.Iterator {
	ret := _m.Called(prefix)

	var r0 incdb.Iterator
	if rf, ok := ret.Get(0).(func([]byte) incdb.Iterator); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(incdb.Iterator)
		}
	}

	return r0
}

// NewIteratorWithStart provides a mock function with given fields: start
func (_m *Database) NewIteratorWithStart(start []byte) incdb.Iterator {
	ret := _m.Called(start)

	var r0 incdb.Iterator
	if rf, ok := ret.Get(0).(func([]byte) incdb.Iterator); ok {
		r0 = rf(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(incdb.Iterator)
		}
	}

	return r0
}

// Put provides a mock function with given fields: key, value
func (_m *Database) Put(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutBatch provides a mock function with given fields: data
func (_m *Database) PutBatch(data []incdb.BatchData) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]incdb.BatchData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: property
func (_m *Database) Stat(property string) (string, error) {
	ret := _m.Called(property)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(property)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
