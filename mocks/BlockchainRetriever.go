// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/incognitochain/incognito-chain/common"
import incognitokey "github.com/incognitochain/incognito-chain/incognitokey"
import metadata "github.com/incognitochain/incognito-chain/metadata"
import mock "github.com/stretchr/testify/mock"
import statedb "github.com/incognitochain/incognito-chain/dataaccessobject/statedb"

// BlockchainRetriever is an autogenerated mock type for the BlockchainRetriever type
type BlockchainRetriever struct {
	mock.Mock
}

// GetAllCommitteeValidatorCandidate provides a mock function with given fields:
func (_m *BlockchainRetriever) GetAllCommitteeValidatorCandidate() (map[byte][]incognitokey.CommitteePublicKey, map[byte][]incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, []incognitokey.CommitteePublicKey, error) {
	ret := _m.Called()

	var r0 map[byte][]incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() map[byte][]incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[byte][]incognitokey.CommitteePublicKey)
		}
	}

	var r1 map[byte][]incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(1).(func() map[byte][]incognitokey.CommitteePublicKey); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[byte][]incognitokey.CommitteePublicKey)
		}
	}

	var r2 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(2).(func() []incognitokey.CommitteePublicKey); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]incognitokey.CommitteePublicKey)
		}
	}

	var r3 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(3).(func() []incognitokey.CommitteePublicKey); ok {
		r3 = rf()
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).([]incognitokey.CommitteePublicKey)
		}
	}

	var r4 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(4).(func() []incognitokey.CommitteePublicKey); ok {
		r4 = rf()
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).([]incognitokey.CommitteePublicKey)
		}
	}

	var r5 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(5).(func() []incognitokey.CommitteePublicKey); ok {
		r5 = rf()
	} else {
		if ret.Get(5) != nil {
			r5 = ret.Get(5).([]incognitokey.CommitteePublicKey)
		}
	}

	var r6 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(6).(func() []incognitokey.CommitteePublicKey); ok {
		r6 = rf()
	} else {
		if ret.Get(6) != nil {
			r6 = ret.Get(6).([]incognitokey.CommitteePublicKey)
		}
	}

	var r7 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(7).(func() []incognitokey.CommitteePublicKey); ok {
		r7 = rf()
	} else {
		if ret.Get(7) != nil {
			r7 = ret.Get(7).([]incognitokey.CommitteePublicKey)
		}
	}

	var r8 error
	if rf, ok := ret.Get(8).(func() error); ok {
		r8 = rf()
	} else {
		r8 = ret.Error(8)
	}

	return r0, r1, r2, r3, r4, r5, r6, r7, r8
}

// GetAllCommitteeValidatorCandidateFlattenListFromDatabase provides a mock function with given fields:
func (_m *BlockchainRetriever) GetAllCommitteeValidatorCandidateFlattenListFromDatabase() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoStakingList provides a mock function with given fields:
func (_m *BlockchainRetriever) GetAutoStakingList() map[string]bool {
	ret := _m.Called()

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func() map[string]bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	return r0
}

// GetBeaconFeatureStateDB provides a mock function with given fields:
func (_m *BlockchainRetriever) GetBeaconFeatureStateDB() *statedb.StateDB {
	ret := _m.Called()

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func() *statedb.StateDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// GetBeaconHeight provides a mock function with given fields:
func (_m *BlockchainRetriever) GetBeaconHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetBeaconHeightBreakPointBurnAddr provides a mock function with given fields:
func (_m *BlockchainRetriever) GetBeaconHeightBreakPointBurnAddr() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetBeaconRewardStateDB provides a mock function with given fields:
func (_m *BlockchainRetriever) GetBeaconRewardStateDB() *statedb.StateDB {
	ret := _m.Called()

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func() *statedb.StateDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// GetBeaconSlashStateDB provides a mock function with given fields:
func (_m *BlockchainRetriever) GetBeaconSlashStateDB() *statedb.StateDB {
	ret := _m.Called()

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func() *statedb.StateDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// GetBurningAddress provides a mock function with given fields: blockHeight
func (_m *BlockchainRetriever) GetBurningAddress(blockHeight uint64) string {
	ret := _m.Called(blockHeight)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(blockHeight)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCentralizedWebsitePaymentAddress provides a mock function with given fields:
func (_m *BlockchainRetriever) GetCentralizedWebsitePaymentAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetChainHeight provides a mock function with given fields: _a0
func (_m *BlockchainRetriever) GetChainHeight(_a0 byte) uint64 {
	ret := _m.Called(_a0)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(byte) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetCurrentBeaconBlockHeight provides a mock function with given fields: _a0
func (_m *BlockchainRetriever) GetCurrentBeaconBlockHeight(_a0 byte) uint64 {
	ret := _m.Called(_a0)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(byte) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetShardFeatureStateDB provides a mock function with given fields: shardID
func (_m *BlockchainRetriever) GetShardFeatureStateDB(shardID byte) *statedb.StateDB {
	ret := _m.Called(shardID)

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func(byte) *statedb.StateDB); ok {
		r0 = rf(shardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// GetShardIDFromTx provides a mock function with given fields: txid
func (_m *BlockchainRetriever) GetShardIDFromTx(txid string) (byte, error) {
	ret := _m.Called(txid)

	var r0 byte
	if rf, ok := ret.Get(0).(func(string) byte); ok {
		r0 = rf(txid)
	} else {
		r0 = ret.Get(0).(byte)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShardRewardStateDB provides a mock function with given fields: shardID
func (_m *BlockchainRetriever) GetShardRewardStateDB(shardID byte) *statedb.StateDB {
	ret := _m.Called(shardID)

	var r0 *statedb.StateDB
	if rf, ok := ret.Get(0).(func(byte) *statedb.StateDB); ok {
		r0 = rf(shardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.StateDB)
		}
	}

	return r0
}

// GetStakingAmountShard provides a mock function with given fields:
func (_m *BlockchainRetriever) GetStakingAmountShard() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetStakingTx provides a mock function with given fields: _a0
func (_m *BlockchainRetriever) GetStakingTx(_a0 byte) map[string]string {
	ret := _m.Called(_a0)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(byte) map[string]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetTransactionByHash provides a mock function with given fields: _a0
func (_m *BlockchainRetriever) GetTransactionByHash(_a0 common.Hash) (byte, common.Hash, int, metadata.Transaction, error) {
	ret := _m.Called(_a0)

	var r0 byte
	if rf, ok := ret.Get(0).(func(common.Hash) byte); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(byte)
	}

	var r1 common.Hash
	if rf, ok := ret.Get(1).(func(common.Hash) common.Hash); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.Hash)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(common.Hash) int); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 metadata.Transaction
	if rf, ok := ret.Get(3).(func(common.Hash) metadata.Transaction); ok {
		r3 = rf(_a0)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(metadata.Transaction)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(common.Hash) error); ok {
		r4 = rf(_a0)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetTxChainHeight provides a mock function with given fields: tx
func (_m *BlockchainRetriever) GetTxChainHeight(tx metadata.Transaction) (uint64, error) {
	ret := _m.Called(tx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(metadata.Transaction) uint64); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metadata.Transaction) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxValue provides a mock function with given fields: txid
func (_m *BlockchainRetriever) GetTxValue(txid string) (uint64, error) {
	ret := _m.Called(txid)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(txid)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrivacyTokenAndBridgeTokenAndPRVByShardID provides a mock function with given fields: _a0
func (_m *BlockchainRetriever) ListPrivacyTokenAndBridgeTokenAndPRVByShardID(_a0 byte) ([]common.Hash, error) {
	ret := _m.Called(_a0)

	var r0 []common.Hash
	if rf, ok := ret.Get(0).(func(byte) []common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
