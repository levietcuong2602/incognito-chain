// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/incognitochain/incognito-chain/common"
import mock "github.com/stretchr/testify/mock"
import statedb "github.com/incognitochain/incognito-chain/dataaccessobject/statedb"
import trie "github.com/incognitochain/incognito-chain/trie"

// DatabaseAccessWarper is an autogenerated mock type for the DatabaseAccessWarper type
type DatabaseAccessWarper struct {
	mock.Mock
}

// CopyTrie provides a mock function with given fields: _a0
func (_m *DatabaseAccessWarper) CopyTrie(_a0 statedb.Trie) statedb.Trie {
	ret := _m.Called(_a0)

	var r0 statedb.Trie
	if rf, ok := ret.Get(0).(func(statedb.Trie) statedb.Trie); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(statedb.Trie)
		}
	}

	return r0
}

// OpenPrefixTrie provides a mock function with given fields: root
func (_m *DatabaseAccessWarper) OpenPrefixTrie(root common.Hash) (statedb.Trie, error) {
	ret := _m.Called(root)

	var r0 statedb.Trie
	if rf, ok := ret.Get(0).(func(common.Hash) statedb.Trie); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(statedb.Trie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrieDB provides a mock function with given fields:
func (_m *DatabaseAccessWarper) TrieDB() *trie.IntermediateWriter {
	ret := _m.Called()

	var r0 *trie.IntermediateWriter
	if rf, ok := ret.Get(0).(func() *trie.IntermediateWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*trie.IntermediateWriter)
		}
	}

	return r0
}
