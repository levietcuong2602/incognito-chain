// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	common "github.com/incognitochain/incognito-chain/common"
	incognitokey "github.com/incognitochain/incognito-chain/incognitokey"

	mock "github.com/stretchr/testify/mock"

	privacy "github.com/incognitochain/incognito-chain/privacy"
)

// UnstakeRule is an autogenerated mock type for the UnstakeRule type
type UnstakeRule struct {
	mock.Mock
}

// RemoveFromState provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *UnstakeRule) RemoveFromState(_a0 incognitokey.CommitteePublicKey, _a1 map[string]bool, _a2 map[string]privacy.PaymentAddress, _a3 map[string]common.Hash, _a4 map[string]uint64, _a5 []string, _a6 []string) (map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) map[string]bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 map[string]privacy.PaymentAddress
	if rf, ok := ret.Get(1).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) map[string]privacy.PaymentAddress); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]privacy.PaymentAddress)
		}
	}

	var r2 map[string]common.Hash
	if rf, ok := ret.Get(2).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) map[string]common.Hash); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string]common.Hash)
		}
	}

	var r3 map[string]uint64
	if rf, ok := ret.Get(3).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) map[string]uint64); ok {
		r3 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(map[string]uint64)
		}
	}

	var r4 []string
	if rf, ok := ret.Get(4).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) []string); ok {
		r4 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).([]string)
		}
	}

	var r5 []string
	if rf, ok := ret.Get(5).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) []string); ok {
		r5 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(5) != nil {
			r5 = ret.Get(5).([]string)
		}
	}

	var r6 error
	if rf, ok := ret.Get(6).(func(incognitokey.CommitteePublicKey, map[string]bool, map[string]privacy.PaymentAddress, map[string]common.Hash, map[string]uint64, []string, []string) error); ok {
		r6 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r6 = ret.Error(6)
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// Version provides a mock function with given fields:
func (_m *UnstakeRule) Version() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
